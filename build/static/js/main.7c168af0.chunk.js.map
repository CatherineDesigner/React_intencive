{"version":3,"sources":["logo.svg","error.png","components/Header.js","components/User.js","services/instaservice.js","components/ErrorMessage.js","components/Posts.js","components/Users.js","components/Feed.js","components/Palette.js","components/Profile.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","react_router_dom","to","alt","src","logo","Component","Post","href","this","props","min","name","InstaService","_this","Object","classCallCheck","getResource","_ref","asyncToGenerator","regenerator_default","mark","_callee","url","res","wrap","_context","prev","next","fetch","concat","_apiBase","sent","ok","Error","status","abrupt","json","stop","_x","apply","arguments","getAllPosts","_callee2","_context2","getAllPhotos","_callee3","_context3","map","_transformPosts","post","id","ErrorMessage","Fragment","img","Posts","state","posts","error","onPostsLoaded","setState","onError","err","updatePosts","then","catch","arr","item","altname","photo","descr","key","User_Post","_this$state","components_ErrorMessage","items","renderItems","Users","Feed","Posts_Posts","Palette","photos","onPhotosLoaded","updatePhotos","Profile","Palette_Palette","App","Header_Header","react_router","path","component","exact","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.7c168af0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9e8a2b39.svg\";","module.exports = __webpack_public_path__ + \"static/media/error.3b8ad90a.png\";","// Повторяется на каждой странице\r\nimport React, {Component} from 'react';\r\n// берем библиотеку, чтобы её использовать\r\nimport logo from '../logo.svg'; //благодаря Webpack\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    return(\r\n      <header>\r\n        <div className=\"container h-flex\">\r\n          <Link to=\"/\" className=\"logo\">\r\n            <img alt=\"logo\" src={logo}></img>\r\n          </Link>\r\n          <nav className=\"links\">\r\n            <ul>\r\n              <li>\r\n                <Link to=\"/\" className=\"menu__links\">Лента</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/profile\" className=\"menu__links\">Профиль</Link>\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n          </div>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n","// каждый отдельный пользователь\r\nimport React, {Component} from 'react';\r\n\r\nexport default class Post extends Component {\r\n    render() {\r\n        return(\r\n          <a href=\"localhost:3000\" className={this.props.min ? \"user min\" : \"user\"}>\r\n           <img src={this.props.src} alt={this.props.alt}></img> {/*ФОТОграфия и описание имени аккаунта*/}\r\n           <div>{this.props.name}</div> {/* Имя пользователя*/}\r\n           </a>\r\n        )\r\n    }\r\n}\r\n\r\n//Верстка простая: ссылка, картинка, блог\r\n// фотография каждого отдельного пользователя\r\n","// тут всё хранится!\r\n // Учимся работать с сервером методами\r\n // Мы  собрали всё в один метод, оптимизировали\r\nexport default class InstaService {\r\n\r\n    constructor() {\r\n     this._apiBase = 'http://localhost:3000/' //базовый Api адрес\r\n    }\r\n    getResource = async (url) => {\r\n        // будет записан рез запроса от сервера\r\n        const res = await fetch(`${this._apiBase}${url}`);\r\n        // await-ждём операцию...async и await работают только в паре!\r\n        // если не ок то ошибка\r\n        //res статус - статус ошибки (что за ошибка)\r\n        if(!res.ok){\r\n            throw new Error(`Could not fetch ${url}, received ${res.status}`)\r\n        }\r\n        //возвращает промис - что нам придут данные в формате json\r\n        return res.json()\r\n    }\r\n\r\n    // 2 метод Post, получает ВСЕ посты из нашей БД\r\n    getAllPosts = async () => {\r\n       const res = await this.getResource('posts/');\r\n       return res;   // возвращаются все свойства\r\n   }\r\n\r\n  // тут вернуть картинки и альтернативный текст только самые нужные\r\n    getAllPhotos = async () => {\r\n        const res = await  this.getResource('posts/');\r\n        return res.map(this._transformPosts); // возвращаются не все свойства, а тол ько самые нужные/трансформированные\r\n    }\r\n    _transformPosts = (post)=> {\r\n       return {    // выбираем только действительно нужные/возвращаем\r\n           src: post.src,\r\n           alt: post.alt,\r\n           id: post.id\r\n   }\r\n }\r\n}\r\n// здесь можно было аналогично прописать дом. задание урока № 2 - возвратить только: картинку, имя и alt профиля\r\n","import React from 'react';\r\nimport img from '../error.png'; // вышли из папки и на этом же уровне подхватили картинку\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <>\r\n            <img src={img} alt=\"error\"></img>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;\r\n","import React, {Component} from 'react';\r\nimport User from './User';\r\nimport InstaService from '../services/instaservice';\r\nimport ErrorMessage from './ErrorMessage';\r\n\r\n\r\nexport default class Posts extends Component {\r\n  // новый синтаксис - classFields классовые поля  es10\r\n  // *Создаои  сервис,заимпортировали, чтобы обращаться к БД, Создали состояние компонента: отслеживаем какие посты есть и состояние ошибки\r\n   InstaService = new InstaService();\r\n      // состояния описываем\r\n      state = {\r\n      posts: [],\r\n      error: false\r\n  }\r\n  // когда он загрузится, тогда мы что то сделаем\r\n  // *как только подстроился,то запускаем функцию this.updatePosts\r\n  componentDidMount() {\r\n      this.updatePosts()\r\n  }\r\n   // Получает посты и устанавливает состояние\r\n   //* Функция эта запускает сервер, запускает getAllPosts, запускаем промис которая она возвращ.. если все ок, то запускаем функцию  onPostsLoaded\r\n  updatePosts() {\r\n     //получил промис\r\n     this.InstaService.getAllPosts()\r\n         .then(this.onPostsLoaded)\r\n         .catch(this.onError)   // когда посты не загрузились\r\n\r\n }\r\n\r\n //* если все ок, то получаем посты с БД и устанавливает наши посты в наше состояние. Если вдруг что то пошло не так, то получаем ошибку  onError\r\n  onPostsLoaded = (posts) => {\r\n         this.setState({\r\n             posts,   // новый пост\r\n             error: false\r\n         })\r\n     }\r\n     //*onError устанавливает состояние нашего компонента в true\r\n     // когда посты не загрузились\r\n     onError = (err) => {\r\n           this.setState({\r\n               error: true\r\n           })\r\n       }\r\n\r\n// Колбек функция. Деструктуризация. Вытащили перменные из объекта\r\n       renderItems(arr){\r\n              return arr.map((item) => {\r\n                  const {name, altname, photo, src, alt, descr, id} = item;\r\n                 return (       // возвращает препроцессоры jsx\r\n\r\n                   //базис верстка для построения каждого отдельного поста\r\n                   <div key={id} className=\"post\">\r\n                   <User\r\n                    src={photo} alt={altname} name={name} min/>\r\n                       <img src={src} alt={alt}></img>\r\n                       <div className=\"post__name\">\r\n                           {name}\r\n                       </div>\r\n                       <div className=\"post__descr\">\r\n                    {descr}\r\n                       </div>\r\n                   </div>\r\n            )\r\n\r\n            })\r\n          }\r\n\r\n\r\n\r\n\r\n // рендарим всё,что приходит с БД\r\n  render() {\r\n    const{error, posts} = this.state;\r\n          if(error){\r\n              return <ErrorMessage/>\r\n          }\r\n    const items = this.renderItems(posts);\r\n\r\n    return(\r\n   <div className=\"left\">\r\n         {items}\r\n  {/*}<Post alt=\"altay\" src=\"https://img.lookmytrips.com/images/look6tmn/580f46baff936759c704aa1e-5b166611788a9-1dhcpgh-lbcvr.jpg\" />\r\n  <Post alt=\"altay\" src=\"http://muz4in.net/2016/08/04/76.jpeg\" />*/}\r\n   </div>\r\n\r\n    )\r\n  }\r\n}\r\n//Этот КОМПОНЕНТ использует посты\r\n// из базы данных посты\r\n","import React from 'react';\r\nimport User from './User';\r\n\r\nexport default function Users() {\r\n    return(\r\n        <div className=\"right\">\r\n        <User\r\n         src=\"https://24smi.org/public/media/resize/800x-/2018/3/16/430050.jpg\" alt=\"princess\" name=\"Emmanuel_Bear\"/>\r\n        <div className=\"users__block\">\r\n        <User\r\n         src=\"http://v.img.com.ua/b/orig/e/90/f0b6fabcea4abacbec32289a2cfdc90e.jpg\" alt=\"princess\" name=\"Николь_Кидман\"min/>\r\n         <User\r\n          src=\"https://ichef.bbci.co.uk/news/660/cpsprodpb/BA62/production/_104241774_493da3bc-595a-4c49-9236-945e2c95adce.jpg\" alt=\"princ\" name=\"Дональд_Трамп\"min/>\r\n          <User\r\n           src=\"https://static.news.ru/photo/9a8d4e76-26fa-45d5-b9b5-cb6743d1caea_660.jpg\" alt=\"princess\" name=\"Иванка_Трамп\"min/>\r\n           <User\r\n            src=\"http://vitbich.org/wp-content/uploads/2018/03/1-13.jpg\" alt=\"princ\" name=\"Брзд_Питт\"min/>\r\n\r\n\r\n       </div>\r\n       </div>\r\n    )\r\n}\r\n // правая часть приложения, состоящая из 2-х элементов\r\n","//  КОМПОНЕНТ (большой кусок), собирающий в себе ещё несколько компонентов(собирает в  себя левую часть с ПОСТАМИ и правую часть- с ПОЛЬЗОВАТЕЛЯМИ)и экспортируется в App.js \r\nimport React from 'react';\r\nimport Post from './Posts';\r\nimport User from './Users';\r\n\r\nexport default function Feed(){\r\nreturn(\r\n <div className=\"container feed\">\r\n <Post/>\r\n <User/>\r\n </div>\r\n\r\n)\r\n\r\n}\r\n//это КОМПОНЕНТ, собирающий в себе ещё несколько компонентов,собирает в  себя левую часть с ПОСТАМИ и правую часть- с ПОЛЬЗОВАТЕЛЯМИ\r\n\r\n//Сюда экспортируются Юзерсы\r\n","import React, {Component}from 'react';\r\nimport ErrorMessage from './ErrorMessage';\r\nimport InstaService from '../services/instaservice';\r\n\r\nexport default class Palette extends Component {\r\n    InstaService = new InstaService();\r\n    state = {\r\n        photos: [],\r\n        error:false\r\n    }\r\n // когда компонент создался на стр.в нём будет выполняться какая то операция\r\n componentDidMount() {\r\n     this.updatePhotos();\r\n }\r\n   updatePhotos() {\r\n      this.InstaService.getAllPhotos()  //создать потом в instaservice\r\n        .then(this.onPhotosLoaded)   // когда будет загружаться, будут меняться фотографии\r\n        .catch(this.onError);\r\n}\r\n\r\n onPhotosLoaded = (photos) => {\r\n        this.setState({\r\n            photos,   // новое фото?\r\n            error: false\r\n        })\r\n    }\r\n\r\n    onError = (err) => {\r\n          this.setState({\r\n              error: true  // ошибки\r\n          })\r\n      }\r\n\r\n    renderItems(arr){\r\n             return arr.map((item) => {\r\n             const {src, alt, id} = item;\r\n                return (\r\n                  <img src={src} alt={alt} key={id}/>  //внутри здесь колбек функция\r\n           )\r\n\r\n           })\r\n         }\r\n            render(){\r\n              const {error, photos} = this.state;\r\n        if (error){\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        const items = this.renderItems(photos);\r\n\r\n        return (\r\n            <div className=\"palette\"> {/* отрендарили и помещаем на стр.*/}\r\n                {items}\r\n            </div>\r\n\r\n              )\r\n            }\r\n\r\n        }\r\n\r\n//импортирует палетку в профиль, чтобы все отрендарилось как надо\r\n// рендарим всё,что приходит с БД\r\n","//в профиле показываем пользователя, которому надо залогиниться\r\nimport React from 'react';\r\nimport User from './User';\r\nimport Palette from './Palette'; // импортируем шаблон сюда, связанные с данными  из БД\r\n\r\nconst Profile = () => {\r\n    return (\r\n      <div className='container profile'>\r\n                <User\r\n                    src=\"https://s5.cdn.teleprogramma.pro/wp-content/uploads/2019/03/2d2b9151a77fcc58afbc0850a6556629.jpg\"\r\n                    alt=\"Female\"\r\n                    name=\"some_cool_name\"/>\r\n                 <Palette/>  \r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","//Сборная солянка собирает в себе все самые главные куски приложения\nimport React from 'react';\nimport Header from './components/Header';\nimport Feed from './components/Feed';\nimport Profile from  './components/Profile';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n     <Header/>\n     <Route path=\"/\" component={Feed} exact/>\n     <Route path=\"/profile\" component={Profile} exact/>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n//Создаем 1 компонент, использующийся на 1 и 2 стр. это Шапка Хеадер (разместить логотип, и 2 ссылки: Лента и Профиль\n //Внутри приложения Маршрутизация\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'; //импортируется приложение, которое будет выводится на страницу\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n// РЕНДАРИМ App и ПОМЕЩАЕМ на страницу(insta_react/public/index.html)\n"],"sourceRoot":""}